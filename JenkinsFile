pipeline {
    agent any
    environment {
        IMAGE_NAME = 'omkarsatav/calculator:latest'
        GITHUB_REPOSITORY = 'https://github.com/OmkarSatav/ScientificCalculator.git'
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git branch: 'master', url: "${GITHUB_REPOSITORY}"
                }
            }
        }

        stage('Build Application') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('Execute Unit Tests') {
            steps {
                script {
                    sh "mvn test"
                }
            }
        }

        stage('Create Docker Image') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_NAME .'
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DockerHubCred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        def loginStatus = sh(script: 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin', returnStatus: true)
                        if (loginStatus != 0) {
                            error("ðŸ”´ Docker login failed. Please check your credentials.")
                        }

                        def pushStatus = sh(script: 'docker push $IMAGE_NAME', returnStatus: true)
                        if (pushStatus != 0) {
                            error("ðŸ”´ Docker image push failed. Please check repository permissions on Docker Hub.")
                        }
                    }
                }
            }
        }

        stage('Ansible Deployment') {
            steps {
                script {
                    ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: 'inventory'
                    )
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
